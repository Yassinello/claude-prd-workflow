name: Validate Plugin

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  validate-structure:
    name: Validate Plugin Structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate plugin.json
        run: |
          if [ ! -f ".claude-plugin/plugin.json" ]; then
            echo "❌ Missing .claude-plugin/plugin.json"
            exit 1
          fi
          echo "✅ plugin.json exists"

          # Validate JSON syntax
          if ! jq empty .claude-plugin/plugin.json 2>/dev/null; then
            echo "❌ Invalid JSON in plugin.json"
            exit 1
          fi
          echo "✅ plugin.json is valid JSON"

          # Check required fields
          required_fields=("name" "version" "displayName" "author" "description")
          for field in "${required_fields[@]}"; do
            if ! jq -e ".$field" .claude-plugin/plugin.json > /dev/null; then
              echo "❌ Missing required field: $field"
              exit 1
            fi
          done
          echo "✅ All required fields present"

      - name: Validate marketplace.json
        run: |
          if [ ! -f ".claude-plugin/marketplace.json" ]; then
            echo "❌ Missing .claude-plugin/marketplace.json"
            exit 1
          fi
          echo "✅ marketplace.json exists"

          if ! jq empty .claude-plugin/marketplace.json 2>/dev/null; then
            echo "❌ Invalid JSON in marketplace.json"
            exit 1
          fi
          echo "✅ marketplace.json is valid JSON"

      - name: Validate commands
        run: |
          command_count=$(find commands -name "*.md" -type f | wc -l)
          if [ $command_count -eq 0 ]; then
            echo "❌ No commands found in commands/"
            exit 1
          fi
          echo "✅ Found $command_count commands"

          # Validate each command has required frontmatter
          for cmd in commands/*.md; do
            if ! grep -q "^name:" "$cmd"; then
              echo "❌ Missing 'name:' in $cmd"
              exit 1
            fi
            if ! grep -q "^description:" "$cmd"; then
              echo "❌ Missing 'description:' in $cmd"
              exit 1
            fi
          done
          echo "✅ All commands have required frontmatter"

      - name: Validate agents
        run: |
          agent_count=$(find agents -name "*.md" -type f | wc -l)
          if [ $agent_count -eq 0 ]; then
            echo "❌ No agents found in agents/"
            exit 1
          fi
          echo "✅ Found $agent_count agents"

      - name: Validate skills
        run: |
          skill_count=$(find skills -name "*.md" -type f | wc -l)
          if [ $skill_count -eq 0 ]; then
            echo "❌ No skills found in skills/"
            exit 1
          fi
          echo "✅ Found $skill_count skills"

      - name: Validate templates
        run: |
          template_count=$(find templates -name "*.md" -type f | wc -l)
          if [ $template_count -eq 0 ]; then
            echo "❌ No templates found in templates/"
            exit 1
          fi
          echo "✅ Found $template_count templates"

      - name: Validate configuration
        run: |
          if [ ! -f "config/default-config.json" ]; then
            echo "❌ Missing config/default-config.json"
            exit 1
          fi
          echo "✅ default-config.json exists"

          if ! jq empty config/default-config.json 2>/dev/null; then
            echo "❌ Invalid JSON in default-config.json"
            exit 1
          fi
          echo "✅ default-config.json is valid JSON"

          # Validate schema if present
          if [ -f "config/schema.json" ]; then
            if ! jq empty config/schema.json 2>/dev/null; then
              echo "❌ Invalid JSON in schema.json"
              exit 1
            fi
            echo "✅ schema.json is valid JSON"
          fi

      - name: Validate presets
        run: |
          preset_count=$(find config/presets -name "*.json" -type f 2>/dev/null | wc -l)
          if [ $preset_count -eq 0 ]; then
            echo "⚠️ No presets found (optional)"
          else
            echo "✅ Found $preset_count presets"

            # Validate each preset is valid JSON
            for preset in config/presets/*.json; do
              if ! jq empty "$preset" 2>/dev/null; then
                echo "❌ Invalid JSON in $preset"
                exit 1
              fi
            done
            echo "✅ All presets are valid JSON"
          fi

  validate-documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README exists
        run: |
          if [ ! -f "README.md" ]; then
            echo "❌ Missing README.md"
            exit 1
          fi
          echo "✅ README.md exists"

          # Check README has minimum sections
          required_sections=("Features" "Installation" "Quick Start" "Commands")
          for section in "${required_sections[@]}"; do
            if ! grep -qi "# $section\|## $section" README.md; then
              echo "⚠️ README.md missing recommended section: $section"
            fi
          done

      - name: Check CHANGELOG exists
        run: |
          if [ ! -f "CHANGELOG.md" ]; then
            echo "⚠️ Missing CHANGELOG.md (recommended)"
          else
            echo "✅ CHANGELOG.md exists"
          fi

      - name: Check LICENSE exists
        run: |
          if [ ! -f "LICENSE" ]; then
            echo "⚠️ Missing LICENSE (recommended)"
          else
            echo "✅ LICENSE exists"
          fi

      - name: Check CONTRIBUTING guide exists
        run: |
          if [ ! -f "CONTRIBUTING.md" ]; then
            echo "⚠️ Missing CONTRIBUTING.md (recommended)"
          else
            echo "✅ CONTRIBUTING.md exists"
          fi

      - name: Validate markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'
        continue-on-error: true

  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check examples directory
        run: |
          if [ ! -d "docs/examples" ]; then
            echo "⚠️ No examples directory (recommended)"
          else
            example_count=$(find docs/examples -name "*.md" -type f | wc -l)
            echo "✅ Found $example_count example files"
          fi

      - name: Validate example code blocks
        run: |
          if [ -d "docs/examples" ]; then
            # Check that examples have code blocks
            for example in docs/examples/*.md; do
              if ! grep -q '```' "$example"; then
                echo "⚠️ $example has no code blocks"
              fi
            done
          fi

  check-breaking-changes:
    name: Check for Breaking Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check plugin.json version
        run: |
          git fetch origin main

          # Compare version in plugin.json
          current_version=$(jq -r '.version' .claude-plugin/plugin.json)
          main_version=$(git show origin/main:.claude-plugin/plugin.json | jq -r '.version')

          echo "Current version: $current_version"
          echo "Main version: $main_version"

          if [ "$current_version" = "$main_version" ]; then
            echo "⚠️ Version not bumped (current: $current_version)"
            echo "If this PR contains changes, please bump the version."
          else
            echo "✅ Version bumped: $main_version → $current_version"
          fi

      - name: Check for breaking changes in config schema
        run: |
          git fetch origin main

          if git diff origin/main HEAD -- config/schema.json | grep -q "^-"; then
            echo "⚠️ Potential breaking changes detected in schema.json"
            echo "Removed fields:"
            git diff origin/main HEAD -- config/schema.json | grep "^-" | head -n 10
            echo ""
            echo "Please ensure version is bumped according to semver:"
            echo "- Major version for breaking changes"
            echo "- Minor version for new features"
            echo "- Patch version for bug fixes"
          else
            echo "✅ No breaking changes detected in schema"
          fi

  summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-structure, validate-documentation, validate-examples]
    if: always()
    steps:
      - name: Check validation results
        run: |
          echo "## Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.validate-structure.result }}" = "success" ]; then
            echo "✅ Plugin structure validation passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Plugin structure validation failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.validate-documentation.result }}" = "success" ]; then
            echo "✅ Documentation validation passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Documentation validation failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.validate-examples.result }}" = "success" ]; then
            echo "✅ Examples validation passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Examples validation skipped or failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Overall status
          if [ "${{ needs.validate-structure.result }}" = "success" ] && [ "${{ needs.validate-documentation.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ All critical validations passed!" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ❌ Some validations failed - please review" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
