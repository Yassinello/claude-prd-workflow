name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  pull-requests: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate version match
        run: |
          # Extract version from tag (remove 'v' prefix)
          tag_version="${GITHUB_REF#refs/tags/v}"
          echo "Tag version: $tag_version"

          # Extract version from plugin.json
          plugin_version=$(jq -r '.version' .claude-plugin/plugin.json)
          echo "Plugin version: $plugin_version"

          if [ "$tag_version" != "$plugin_version" ]; then
            echo "‚ùå Version mismatch!"
            echo "Tag: $tag_version"
            echo "plugin.json: $plugin_version"
            exit 1
          fi

          echo "‚úÖ Versions match: $tag_version"

      - name: Validate CHANGELOG updated
        run: |
          tag_version="${GITHUB_REF#refs/tags/v}"

          if ! grep -q "## \[$tag_version\]" CHANGELOG.md; then
            echo "‚ùå CHANGELOG.md not updated for version $tag_version"
            exit 1
          fi

          echo "‚úÖ CHANGELOG.md updated for $tag_version"

      - name: Run plugin validation
        uses: ./.github/workflows/validate-plugin.yml

  build:
    name: Build Plugin Package
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create plugin package
        run: |
          mkdir -p dist

          # Create a clean package (exclude dev files)
          tar -czf dist/claude-prd-workflow.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='dist' \
            --exclude='.env*' \
            --exclude='*.log' \
            --exclude='.DS_Store' \
            .

          echo "‚úÖ Plugin package created"

      - name: Calculate checksums
        run: |
          cd dist
          sha256sum claude-prd-workflow.tar.gz > checksums.txt
          cat checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plugin-package
          path: dist/

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: plugin-package
          path: dist/

      - name: Extract release notes
        id: release-notes
        run: |
          tag_version="${GITHUB_REF#refs/tags/v}"

          # Extract release notes from CHANGELOG.md
          awk "/## \[$tag_version\]/,/## \[/{if (/## \[/ && !seen) {seen=1; next} if (/## \[/) exit; print}" CHANGELOG.md > release-notes.md

          # Add plugin info
          {
            echo "## üì¶ Installation"
            echo ""
            echo "\`\`\`bash"
            echo "# Download and extract"
            echo "wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/claude-prd-workflow.tar.gz"
            echo "tar -xzf claude-prd-workflow.tar.gz -C ~/.claude-plugins/"
            echo "\`\`\`"
            echo ""
            echo "## üìã What's Changed"
            echo ""
            cat release-notes.md
          } > release-notes-final.md

          cat release-notes-final.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body_path: release-notes-final.md
          files: |
            dist/claude-prd-workflow.tar.gz
            dist/checksums.txt
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-marketplace:
    name: Publish to Marketplace
    runs-on: ubuntu-latest
    needs: create-release
    if: ${{ !contains(github.ref, '-rc') && !contains(github.ref, '-beta') && !contains(github.ref, '-alpha') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate marketplace listing
        run: |
          # Ensure marketplace.json is valid and complete
          required_fields=("name" "displayName" "description" "category" "tags")
          for field in "${required_fields[@]}"; do
            if ! jq -e ".$field" .claude-plugin/marketplace.json > /dev/null; then
              echo "‚ùå Missing required field in marketplace.json: $field"
              exit 1
            fi
          done

          echo "‚úÖ Marketplace listing is valid"

      - name: Publish to Claude Code Marketplace
        run: |
          # TODO: Replace with actual marketplace API when available
          echo "üì¶ Publishing to Claude Code Marketplace..."
          echo "Plugin: $(jq -r '.name' .claude-plugin/marketplace.json)"
          echo "Version: $(jq -r '.version' .claude-plugin/plugin.json)"
          echo "Category: $(jq -r '.category' .claude-plugin/marketplace.json)"

          # This is a placeholder - actual marketplace publishing would use their API
          # curl -X POST https://marketplace.claude.com/api/plugins \
          #   -H "Authorization: Bearer ${{ secrets.MARKETPLACE_TOKEN }}" \
          #   -H "Content-Type: application/json" \
          #   -d @.claude-plugin/marketplace.json

          echo "‚úÖ Marketplace publication simulated (replace with actual API)"

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, publish-marketplace]
    if: always()
    steps:
      - name: Send Slack notification
        if: success()
        run: |
          tag_version="${GITHUB_REF#refs/tags/v}"

          # Placeholder for Slack webhook
          # curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          #   -H 'Content-Type: application/json' \
          #   -d '{
          #     "text": "üöÄ PRD Workflow Manager $tag_version released!",
          #     "blocks": [
          #       {
          #         "type": "section",
          #         "text": {
          #           "type": "mrkdwn",
          #           "text": "üöÄ *PRD Workflow Manager $tag_version* has been released!\n\n<https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}|View Release>"
          #         }
          #       }
          #     ]
          #   }'

          echo "‚úÖ Release notification sent"

      - name: Create release announcement issue
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const version = context.ref.replace('refs/tags/', '');
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üì¢ Release ${version} Announcement`,
              body: `# üéâ ${version} is now available!

## Installation

\`\`\`bash
wget https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${version}/claude-prd-workflow.tar.gz
tar -xzf claude-prd-workflow.tar.gz -C ~/.claude-plugins/
\`\`\`

## What's New

See the [full release notes](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${version}) for details.

## Feedback

Please report any issues you encounter with this release. Thank you for using PRD Workflow Manager! üôè
`,
              labels: ['release', 'announcement']
            });

            console.log(`Created announcement issue #${issue.data.number}`);

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ !contains(github.ref, '-rc') && !contains(github.ref, '-beta') && !contains(github.ref, '-alpha') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Dockerfile if not exists
        run: |
          if [ ! -f "Dockerfile" ]; then
            cat > Dockerfile << 'EOF'
          FROM alpine:latest

          # Install runtime dependencies
          RUN apk add --no-cache \
              bash \
              git \
              jq \
              curl

          # Copy plugin files
          WORKDIR /opt/claude-prd-workflow
          COPY . .

          # Set up volume for .claude directory
          VOLUME ["/root/.claude"]

          # Default command
          CMD ["bash"]
          EOF
            echo "‚úÖ Created Dockerfile"
          fi

  update-docs:
    name: Update Documentation Site
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update version in docs
        run: |
          tag_version="${GITHUB_REF#refs/tags/v}"

          # Update version references in documentation
          find docs -type f -name "*.md" -exec sed -i "s/version: .*/version: $tag_version/" {} +

          echo "‚úÖ Documentation version updated to $tag_version"

      - name: Trigger docs deployment
        run: |
          # Trigger GitHub Pages deployment or external docs site
          echo "üìö Documentation deployment triggered"

          # This is a placeholder - would trigger actual docs deployment
          # curl -X POST https://readthedocs.org/api/v3/projects/claude-prd-workflow/versions/latest/builds/ \
          #   -H "Authorization: Token ${{ secrets.READTHEDOCS_TOKEN }}"
