name: Documentation

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'README.md'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'README.md'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check markdown syntax
        uses: DavidAnson/markdownlint-action@v1
        with:
          files: '**/*.md'
          config: '.markdownlint.json'
        continue-on-error: true

      - name: Validate markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          check-modified-files-only: 'yes'
        continue-on-error: true

      - name: Check for broken internal links
        run: |
          echo "Checking for broken internal links..."

          broken_links=0

          # Find all markdown files
          while IFS= read -r file; do
            # Extract markdown links
            grep -oP '\[.*?\]\(\K[^)]+' "$file" | while read -r link; do
              # Skip external links
              if [[ $link == http* ]]; then
                continue
              fi

              # Skip anchors
              if [[ $link == \#* ]]; then
                continue
              fi

              # Get directory of current file
              dir=$(dirname "$file")

              # Resolve relative path
              target="$dir/$link"
              target=$(realpath -m "$target")

              # Check if target exists
              if [ ! -e "$target" ]; then
                echo "‚ùå Broken link in $file: $link"
                broken_links=$((broken_links + 1))
              fi
            done
          done < <(find . -name "*.md" -type f)

          if [ $broken_links -gt 0 ]; then
            echo "‚ùå Found $broken_links broken internal links"
            exit 1
          else
            echo "‚úÖ No broken internal links found"
          fi

      - name: Check documentation coverage
        run: |
          echo "## Documentation Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count commands with documentation
          total_commands=$(find commands -name "*.md" -type f | wc -l)
          echo "- Commands: $total_commands" >> $GITHUB_STEP_SUMMARY

          # Count agents with documentation
          total_agents=$(find agents -name "*.md" -type f | wc -l)
          echo "- Agents: $total_agents" >> $GITHUB_STEP_SUMMARY

          # Count skills with documentation
          total_skills=$(find skills -name "*.md" -type f | wc -l)
          echo "- Skills: $total_skills" >> $GITHUB_STEP_SUMMARY

          # Check for getting started guide
          if [ -f "docs/getting-started.md" ]; then
            echo "- ‚úÖ Getting Started guide" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Missing Getting Started guide" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for API reference
          if [ -f "docs/commands-reference.md" ]; then
            echo "- ‚úÖ Commands Reference" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ö†Ô∏è Missing Commands Reference" >> $GITHUB_STEP_SUMMARY
          fi

          # Check for examples
          example_count=$(find docs/examples -name "*.md" -type f 2>/dev/null | wc -l)
          if [ $example_count -gt 0 ]; then
            echo "- ‚úÖ $example_count example workflows" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ö†Ô∏è No example workflows" >> $GITHUB_STEP_SUMMARY
          fi

  build-docs:
    name: Build Documentation Site
    runs-on: ubuntu-latest
    needs: validate-docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate static site
        run: |
          mkdir -p _site

          # Create index.html
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>PRD Workflow Manager - Documentation</title>
            <style>
              * { margin: 0; padding: 0; box-sizing: border-box; }
              body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
              }
              header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 40px 20px;
                border-radius: 8px;
                margin-bottom: 40px;
              }
              h1 { font-size: 2.5rem; margin-bottom: 10px; }
              .tagline { font-size: 1.2rem; opacity: 0.9; }
              .grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin-bottom: 40px;
              }
              .card {
                background: white;
                border: 1px solid #e1e4e8;
                border-radius: 8px;
                padding: 20px;
                transition: transform 0.2s, box-shadow 0.2s;
              }
              .card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
              }
              .card h2 { margin-bottom: 10px; color: #667eea; }
              .card p { color: #666; margin-bottom: 15px; }
              .card a {
                display: inline-block;
                color: #667eea;
                text-decoration: none;
                font-weight: 500;
              }
              .card a:hover { text-decoration: underline; }
              footer {
                text-align: center;
                padding: 20px;
                color: #666;
                border-top: 1px solid #e1e4e8;
                margin-top: 40px;
              }
            </style>
          </head>
          <body>
            <header>
              <h1>üìã PRD Workflow Manager</h1>
              <p class="tagline">The complete PRD lifecycle management plugin for Claude Code</p>
            </header>

            <div class="grid">
              <div class="card">
                <h2>üöÄ Getting Started</h2>
                <p>Get up and running in 15 minutes</p>
                <a href="docs/getting-started.html">Read the guide ‚Üí</a>
              </div>

              <div class="card">
                <h2>üìö Commands Reference</h2>
                <p>Complete reference for all 9 commands</p>
                <a href="docs/commands-reference.html">View reference ‚Üí</a>
              </div>

              <div class="card">
                <h2>ü§ñ Agents Guide</h2>
                <p>Learn about the 6 specialized AI agents</p>
                <a href="docs/agents-guide.html">Explore agents ‚Üí</a>
              </div>

              <div class="card">
                <h2>üîß Configuration</h2>
                <p>Customize the plugin for your workflow</p>
                <a href="docs/configuration.html">Configure ‚Üí</a>
              </div>

              <div class="card">
                <h2>üí° Best Practices</h2>
                <p>Proven workflows and recommendations</p>
                <a href="docs/best-practices.html">Learn more ‚Üí</a>
              </div>

              <div class="card">
                <h2>üìñ Examples</h2>
                <p>Real-world workflow examples</p>
                <a href="docs/examples/">Browse examples ‚Üí</a>
              </div>
            </div>

            <footer>
              <p>Made with ‚ù§Ô∏è for Claude Code | <a href="https://github.com/Yassinello/claude-plugin-prd-workflow">GitHub</a></p>
            </footer>
          </body>
          </html>
          EOF

          echo "‚úÖ Generated index.html"

      - name: Convert markdown to HTML
        run: |
          # Install markdown-to-html converter
          npm install -g marked

          # Convert all markdown files to HTML
          find docs -name "*.md" -type f | while read -r file; do
            output="_site/${file%.md}.html"
            mkdir -p "$(dirname "$output")"

            # Simple conversion (in production, use a proper static site generator)
            cat > "$output" << 'HTMLSTART'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>PRD Workflow Manager</title>
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.2.0/github-markdown.min.css">
            <style>
              body {
                max-width: 980px;
                margin: 0 auto;
                padding: 45px;
              }
              .markdown-body { box-sizing: border-box; }
            </style>
          </head>
          <body>
            <div class="markdown-body">
          HTMLSTART

            marked "$file" >> "$output"

            cat >> "$output" << 'HTMLEND'
            </div>
          </body>
          </html>
          HTMLEND
          done

          echo "‚úÖ Converted markdown files to HTML"

      - name: Copy static assets
        run: |
          # Copy README to _site
          if [ -f "README.md" ]; then
            cp README.md _site/
          fi

          # Copy any images or assets
          if [ -d "docs/assets" ]; then
            cp -r docs/assets _site/docs/
          fi

          echo "‚úÖ Copied static assets"

      - name: Create 404 page
        run: |
          cat > _site/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>404 - Page Not Found</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                margin: 0;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                text-align: center;
              }
              h1 { font-size: 4rem; margin-bottom: 20px; }
              p { font-size: 1.5rem; margin-bottom: 30px; }
              a {
                color: white;
                text-decoration: none;
                border: 2px solid white;
                padding: 10px 20px;
                border-radius: 5px;
                transition: background 0.3s;
              }
              a:hover { background: rgba(255,255,255,0.1); }
            </style>
          </head>
          <body>
            <div>
              <h1>404</h1>
              <p>Page not found</p>
              <a href="/">‚Üê Back to documentation</a>
            </div>
          </body>
          </html>
          EOF

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Update deployment status
        run: |
          echo "‚úÖ Documentation deployed to GitHub Pages"
          echo "URL: ${{ steps.deployment.outputs.page_url }}"

  link-check-scheduled:
    name: Scheduled Link Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check all links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'no'
          check-modified-files-only: 'no'

      - name: Create issue if links are broken
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîó Broken links detected in documentation',
              body: `Scheduled link check found broken links in the documentation.

            Please review the [workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`,
              labels: ['documentation', 'bug']
            });

# Scheduled workflow (runs weekly)
on:
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at midnight
